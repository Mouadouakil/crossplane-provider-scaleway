/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GeoIPObservation struct {
}

type GeoIPParameters struct {

	// The list of matches
	// +kubebuilder:validation:Required
	Matches []MatchesParameters `json:"matches" tf:"matches,omitempty"`
}

type HTTPServiceObservation struct {
}

type HTTPServiceParameters struct {

	// IPs to check
	// +kubebuilder:validation:Required
	Ips []*string `json:"ips" tf:"ips,omitempty"`

	// Text to search
	// +kubebuilder:validation:Required
	MustContain *string `json:"mustContain" tf:"must_contain,omitempty"`

	// Strategy to return an IP from the IPs list
	// +kubebuilder:validation:Required
	Strategy *string `json:"strategy" tf:"strategy,omitempty"`

	// URL to match the must_contain text to validate an IP
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// User-agent used when checking the URL
	// +kubebuilder:validation:Optional
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent,omitempty"`
}

type MatchesObservation struct {
}

type MatchesParameters struct {

	// List of continents (eg: EU for Europe, NA for North America, AS for Asia...). List of all continents code: https://api.scaleway.com/domain-private/v2beta1/continents
	// +kubebuilder:validation:Optional
	Continents []*string `json:"continents,omitempty" tf:"continents,omitempty"`

	// List of countries (eg: FR for France, US for the United States, GB for Great Britain...). List of all countries code: https://api.scaleway.com/domain-private/v2beta1/countries
	// +kubebuilder:validation:Optional
	Countries []*string `json:"countries,omitempty" tf:"countries,omitempty"`

	// The data of the match result
	// +kubebuilder:validation:Required
	Data *string `json:"data" tf:"data,omitempty"`
}

type RecordObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Does the DNS zone is the root zone or not
	RootZone *bool `json:"rootZone,omitempty" tf:"root_zone,omitempty"`
}

type RecordParameters struct {

	// The zone you want to add the record in
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	DNSZone *string `json:"dnsZone,omitempty" tf:"dns_zone,omitempty"`

	// Reference to a Zone to populate dnsZone.
	// +kubebuilder:validation:Optional
	DNSZoneRef *v1.Reference `json:"dnsZoneRef,omitempty" tf:"-"`

	// Selector for a Zone to populate dnsZone.
	// +kubebuilder:validation:Optional
	DNSZoneSelector *v1.Selector `json:"dnsZoneSelector,omitempty" tf:"-"`

	// The data of the record
	// +kubebuilder:validation:Required
	Data *string `json:"data" tf:"data,omitempty"`

	// Return record based on client localisation
	// +kubebuilder:validation:Optional
	GeoIP []GeoIPParameters `json:"geoIp,omitempty" tf:"geo_ip,omitempty"`

	// Return record based on client localisation
	// +kubebuilder:validation:Optional
	HTTPService []HTTPServiceParameters `json:"httpService,omitempty" tf:"http_service,omitempty"`

	// When destroy a resource record, if a zone have only NS, delete the zone
	// +kubebuilder:validation:Optional
	KeepEmptyZone *bool `json:"keepEmptyZone,omitempty" tf:"keep_empty_zone,omitempty"`

	// The name of the record
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The priority of the record
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The ttl of the record
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The type of the record
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Return record based on client subnet
	// +kubebuilder:validation:Optional
	View []ViewParameters `json:"view,omitempty" tf:"view,omitempty"`

	// Return record based on weight
	// +kubebuilder:validation:Optional
	Weighted []WeightedParameters `json:"weighted,omitempty" tf:"weighted,omitempty"`
}

type ViewObservation struct {
}

type ViewParameters struct {

	// The data of the view record
	// +kubebuilder:validation:Required
	Data *string `json:"data" tf:"data,omitempty"`

	// The subnet of the view
	// +kubebuilder:validation:Required
	Subnet *string `json:"subnet" tf:"subnet,omitempty"`
}

type WeightedObservation struct {
}

type WeightedParameters struct {

	// The weighted IP
	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`

	// The weight of the IP
	// +kubebuilder:validation:Required
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

// RecordSpec defines the desired state of Record
type RecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RecordParameters `json:"forProvider"`
}

// RecordStatus defines the observed state of Record.
type RecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Record is the Schema for the Records API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Record struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RecordSpec   `json:"spec"`
	Status            RecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RecordList contains a list of Records
type RecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Record `json:"items"`
}

// Repository type metadata.
var (
	Record_Kind             = "Record"
	Record_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Record_Kind}.String()
	Record_KindAPIVersion   = Record_Kind + "." + CRDGroupVersion.String()
	Record_GroupVersionKind = CRDGroupVersion.WithKind(Record_Kind)
)

func init() {
	SchemeBuilder.Register(&Record{}, &RecordList{})
}
