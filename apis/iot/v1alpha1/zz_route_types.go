/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseObservation struct {
}

type DatabaseParameters struct {

	// The database name
	// +kubebuilder:validation:Required
	Dbname *string `json:"dbname" tf:"dbname,omitempty"`

	// The database hostname
	// +kubebuilder:validation:Required
	Host *string `json:"host" tf:"host,omitempty"`

	// The database password
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The database port
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// SQL query to be executed ($TOPIC and $PAYLOAD variables are available, see documentation)
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// The database username
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type RestObservation struct {
}

type RestParameters struct {

	// The HTTP call extra headers
	// +kubebuilder:validation:Required
	Headers map[string]*string `json:"headers" tf:"headers,omitempty"`

	// The URI of the REST endpoint
	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`

	// The HTTP Verb used to call REST URI
	// +kubebuilder:validation:Required
	Verb *string `json:"verb" tf:"verb,omitempty"`
}

type RouteObservation struct {

	// The date and time of the creation of the IoT Route
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RouteParameters struct {

	// Database Route parameters
	// +kubebuilder:validation:Optional
	Database []DatabaseParameters `json:"database,omitempty" tf:"database,omitempty"`

	// The ID of the route's hub
	// +crossplane:generate:reference:type=Hub
	// +kubebuilder:validation:Optional
	HubID *string `json:"hubId,omitempty" tf:"hub_id,omitempty"`

	// Reference to a Hub to populate hubId.
	// +kubebuilder:validation:Optional
	HubIDRef *v1.Reference `json:"hubIdRef,omitempty" tf:"-"`

	// Selector for a Hub to populate hubId.
	// +kubebuilder:validation:Optional
	HubIDSelector *v1.Selector `json:"hubIdSelector,omitempty" tf:"-"`

	// The name of the route
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Rest Route parameters
	// +kubebuilder:validation:Optional
	Rest []RestParameters `json:"rest,omitempty" tf:"rest,omitempty"`

	// S3 Route parameters
	// +kubebuilder:validation:Optional
	S3 []S3Parameters `json:"s3,omitempty" tf:"s3,omitempty"`

	// The Topic the route subscribes to (wildcards allowed)
	// +kubebuilder:validation:Required
	Topic *string `json:"topic" tf:"topic,omitempty"`
}

type S3Observation struct {
}

type S3Parameters struct {

	// The name of the S3 route's destination bucket
	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// The region of the S3 route's destination bucket
	// +kubebuilder:validation:Required
	BucketRegion *string `json:"bucketRegion" tf:"bucket_region,omitempty"`

	// The string to prefix object names with
	// +kubebuilder:validation:Optional
	ObjectPrefix *string `json:"objectPrefix,omitempty" tf:"object_prefix,omitempty"`

	// How the S3 route's objects will be created: one per topic or one per message
	// +kubebuilder:validation:Required
	Strategy *string `json:"strategy" tf:"strategy,omitempty"`
}

// RouteSpec defines the desired state of Route
type RouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteParameters `json:"forProvider"`
}

// RouteStatus defines the observed state of Route.
type RouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route is the Schema for the Routes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Route struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteSpec   `json:"spec"`
	Status            RouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteList contains a list of Routes
type RouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route `json:"items"`
}

// Repository type metadata.
var (
	Route_Kind             = "Route"
	Route_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Route_Kind}.String()
	Route_KindAPIVersion   = Route_Kind + "." + CRDGroupVersion.String()
	Route_GroupVersionKind = CRDGroupVersion.WithKind(Route_Kind)
)

func init() {
	SchemeBuilder.Register(&Route{}, &RouteList{})
}
