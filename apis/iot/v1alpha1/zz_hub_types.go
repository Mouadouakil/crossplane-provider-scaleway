/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HubObservation struct {

	// The current number of connected devices in the Hub
	ConnectedDeviceCount *float64 `json:"connectedDeviceCount,omitempty" tf:"connected_device_count,omitempty"`

	// The date and time of the creation of the IoT Hub
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The number of registered devices in the Hub
	DeviceCount *float64 `json:"deviceCount,omitempty" tf:"device_count,omitempty"`

	// The endpoint to connect the devices to
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The organization_id you want to attach the resource to
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// The status of the hub
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The date and time of the last update of the IoT Hub
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type HubParameters struct {

	// Wether to enable the device auto provisioning or not
	// +kubebuilder:validation:Optional
	DeviceAutoProvisioning *bool `json:"deviceAutoProvisioning,omitempty" tf:"device_auto_provisioning,omitempty"`

	// Whether to enable the hub events or not
	// +kubebuilder:validation:Optional
	DisableEvents *bool `json:"disableEvents,omitempty" tf:"disable_events,omitempty"`

	// Whether to enable the hub or not
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Topic prefix for the hub events
	// +kubebuilder:validation:Optional
	EventsTopicPrefix *string `json:"eventsTopicPrefix,omitempty" tf:"events_topic_prefix,omitempty"`

	// Custom user provided certificate authority
	// +kubebuilder:validation:Optional
	HubCA *string `json:"hubCa,omitempty" tf:"hub_ca,omitempty"`

	// Challenge certificate for the user provided hub CA
	// +kubebuilder:validation:Optional
	HubCAChallenge *string `json:"hubCaChallenge,omitempty" tf:"hub_ca_challenge,omitempty"`

	// The name of the hub
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The product plan of the hub
	// +kubebuilder:validation:Required
	ProductPlan *string `json:"productPlan" tf:"product_plan,omitempty"`

	// The project_id you want to attach the resource to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region you want to attach the resource to
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// HubSpec defines the desired state of Hub
type HubSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HubParameters `json:"forProvider"`
}

// HubStatus defines the observed state of Hub.
type HubStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Hub is the Schema for the Hubs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,scaleway}
type Hub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HubSpec   `json:"spec"`
	Status            HubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HubList contains a list of Hubs
type HubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Hub `json:"items"`
}

// Repository type metadata.
var (
	Hub_Kind             = "Hub"
	Hub_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Hub_Kind}.String()
	Hub_KindAPIVersion   = Hub_Kind + "." + CRDGroupVersion.String()
	Hub_GroupVersionKind = CRDGroupVersion.WithKind(Hub_Kind)
)

func init() {
	SchemeBuilder.Register(&Hub{}, &HubList{})
}
